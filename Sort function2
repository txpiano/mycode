void Insertsort(int* a,int size)
{
    
    for (int i = 0; i < size-1; i++)
    {
        int end = i;
        int x = a[end + 1];
        while (end >= 0)
        {
            if (a[end] > x)
            {
                a[end + 1] = a[end];
                end--;
            }
            else
            {
                a[end + 1] = x;
                break;
            }
        }
        a[end + 1] = x;
    }

}
void Shellsort1(int* a, int size)   
{
   
    for (int gap = 2; gap > 0; gap--)//该循环第一次是将整个数组进行预排序，或者说只要gap>1那都算预排序，当gap=1，就是希尔排序
    {
        for (int j = 0; j < gap; j++)//该循环是排列不同的组，第一次循环就把第一组排好，第二次循环就把第二组排好
        {
            for (int i = j; i < size - gap; i += gap)//该循环是将不同起点且元素之间间隔为gap的gap组数组有序排列
                                                     //先将起点为0的数组排好，再将起点为1的数组排好
            {
                int end = i;
                int x = a[end + gap];
                while (end >= 0)//该循环是为了让插入的x与x之前的数组进行比较，直到插入到一个x适合的位置
                {
                    if (a[end] > x)
                    {
                        a[end + gap] = a[end];
                        end -= gap;
                    }
                    else
                    {
                        a[end + gap] = x;
                        break;
                    }
                }
                a[end + gap] = x;
            }
        }
    }

}
void Shellsort(int* a, int size)
{
    int gap = 3;
    while (gap>1)//此处不能是gap>=1，有可能死循环
    {
        gap = gap / 3 + 1;//这个条件也不能写在最后面，如果写在后面，有可能gap在循环内执行排序操作的时候不会等于1
        for (int i = 0; i < size - gap; i++)
        {
            int end = i;
            int x = a[end + gap];
            while (end >= 0)
            {
                if (a[end] > x)
                {
                    a[end + gap] = a[end];
                    end -= gap;
                }
                else
                {
                    a[end + gap] = x;
                    break;
                }
            }
            a[end + gap] = x;
        }
        
        
    }

}
void swap(int* x, int* y)
{
    int ret = *x;
    *x = *y;
    *y = ret;
}
void Selectsort(int* a, int size)
{
    int mini = 0;
    int maxi = size - 1;
    while (mini < maxi)
    {
        for (int i = mini; i < maxi+1; i++)
        {
            if (a[i] < a[mini])
            {
                swap(&a[i], &a[mini]);
            }
            else  if (a[i] > a[maxi])//此处如果不加else if条件对a[i]的值是否大于a[maxi]进行判断的话，可能导致一个数
                                     //只是单纯大于a[maxi]却小于a[maxi]的数与最大值发生了交换
            {
                swap(&a[i], &a[maxi]);
            }
        }
        mini++;
        maxi--;

    }
  
}
void adjustdown(int* a, int size, int parent)
{
    int child = 2*parent+1;
    while (child < size)
    {
        if (child + 1 < size && a[child+1] > a[child])
        {
            child = child + 1;
        }
        if (a[parent] < a[child])
        {
            swap(&a[parent], &a[child]);
            parent = child;
            child = 2 * child - 1;
        }
        else
        {
            break;
        }
            
    }

}
void heapsort(int* a, int size)
{
    
    int parent = (size - 1) / 2;
    //向下调整建立大堆:时间复杂度O(N)
    //如果向上调整建堆：时间复杂度O(N*logN)
    while (parent>=0)
    {
        adjustdown(a, size, parent);
        parent--;
    }
    int end = size - 1;
    //向下调整堆排序：时间复杂度O(N*logN)
    while (end > 0)
    {
        swap(&a[0], &a[end]);
        adjustdown(a, end, 0);
        end--;
    }

}
//冒泡排序：时间复杂度：O(N^2) 最好：O(N)
void bubblesort(int* a, int size)
{
    int flag = 0;
    for (int j = size-1; j>0; j--)
    {
        for (int i = 0; i < j; i++)
        {
            if (a[i] > a[i + 1])
            {
                swap(&a[i], &a[i + 1]);
                flag = 1;
            }
        }
        //冒泡排序的优化，如果第一次已经是升序了，那就不用进行第二次的冒泡了
        /*if (flag == 0) 
        {
            break;
        }*/

    }
    

}
int main()
{
    int arr[] = { 4,5,6,1,2,3 };
    int size = sizeof(arr) / sizeof(arr[0]);
    //Insertsort(arr,size);
    //Shellsort(arr, size);
    //Selectsort(arr, size);
    //heapsort(arr, size);
    bubblesort(arr, size);

    return 0;
} 
