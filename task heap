typedef int HPDataType;
typedef struct Heap
{
	HPDataType* a;
	int size;
	int capacity;
}Heap;

// 堆的构建
void Swap(int* a, int* b)
{
	int tmp = *a;
	*a = *b;
	*b = tmp;
}
void adjustdown(HPDataType* a, int parent, int n)
{
	int child = 2 * parent + 1;

	while (child < n)
	{
		if (child + 1 < n && a[child + 1] < a[child])
		{
			child++;
		}
		
		if (a[child] < a[parent])
		{
			Swap(&a[parent], &a[child]);

			parent = child;
			child = 2 * parent + 1;

		}
		else
		{
			break;
		}

	}


}
void adjustup(HPDataType* a, int child)
{
	int parent = (child - 1) / 2;
	while (child > 0)
	{
		if (a[parent] > a[child])
		{
			Swap(&a[parent], &a[child]);
			child = parent;
			parent = (child - 1) / 2;
		}
		else
		{
			break;
		}

	}
}
void HeapCreate(Heap* hp, HPDataType* a, int n)
{

	hp->a = (HPDataType*)malloc(10*sizeof(HPDataType));
	hp->capacity = 10;
	hp->size = 0;


	for (int i = 0; i < n; i++)
	{
		//扩容
		if (hp->size == hp->capacity)
		{
			HPDataType* tmp = (HPDataType*)realloc(hp->a, 2 * (hp->capacity) * sizeof(HPDataType));

			if (tmp == NULL)
			{
				printf("realloc fail");
				exit(-1);
			}

			hp->a = tmp;
			hp->capacity = 2 * hp->capacity;

		}

		//插入数据
		hp->a[hp->size] = a[i];
		hp->size++;

		//向上调整建堆
		adjustup(hp->a, i);
	}

}

void HeapDestory(Heap* hp)
{
	assert(hp);

	free(hp->a);
	hp->a = NULL;

	hp->capacity = 0;
	hp->size = 0;

}

void HeapPush(Heap* hp, HPDataType x)
{

	if (hp->size == hp->capacity)
	{
		HPDataType* tmp = (HPDataType*)realloc(hp->a, 2 * (hp->capacity) * sizeof(HPDataType));

		if (tmp == NULL)
		{
			printf("realloc fail");
			exit(-1);
		}

		hp->a = tmp;
		hp->capacity = 2 * hp->capacity;

	}
	
	hp->a[hp->size] = x;

	adjustup(hp->a, hp->size);
	hp->size++;

}


void HeapPop(Heap* hp)
{
	assert(hp->size > 0);

	Swap(&hp->a[0], &hp->a[hp->size - 1]);
	adjustdown(hp->a, 0, --hp->size);


}


HPDataType HeapTop(Heap* hp)
{
	assert(hp->size > 0);

	return hp->a[hp->size - 1];

}

int HeapSize(Heap* hp)
{
	assert(hp);

	return hp->size;
}

int HeapEmpty(Heap* hp)
{
	assert(hp);

	return hp->size == 0;
}

void PrintTopK(int* a, int n, int k)
{
	Heap hp;

	HeapCreate(&hp, a, k);

	for (int i = 0; i < n; i++)
	{
		if (a[i] > hp.a[0])
		{
			Swap(&a[i], &hp.a[0]);
			adjustdown(hp.a, 0, k);

		}

	}

	
}

int main()
{
	/*Heap hp;
	

	int arr[] = { 3,5,7,2,1,9,4,6,11,29 };
	int size = sizeof(arr) / sizeof(arr[0]);

	HeapCreate(&hp, arr,size);
	HeapPush(&hp, 64);*/
	/*HeapPop(&hp);
	HeapPop(&hp);
	HeapPop(&hp);
	HeapPop(&hp);
	HeapPop(&hp);
	HeapPop(&hp);
	HeapPop(&hp);
	HeapPop(&hp);
	HeapPop(&hp);
	HeapPop(&hp);
	HeapPop(&hp);*/

	/*int hsize = HeapSize(&hp);
	int em = HeapEmpty(&hp);*/

	int arrk[100];

	for (int i = 0; i < 100; i++)
	{
		srand(time);
		arrk[i] = rand()%100;

		arrk[1] = 101;
		arrk[55] = 102;
		arrk[74] = 103;
		arrk[26] = 104;
		arrk[99] = 105;
	}

	int size = sizeof(arrk) / sizeof(arrk[0]);

	PrintTopK(arrk, size, 5);
	

	return 0;
}
