typedef int SLDatatype;
typedef struct SeqList
{
    SLDatatype* a;
    size_t size;
    size_t capacity;


}SeqList;

void SeqListInit(SeqList* ps)
{
    ps->a = NULL;
    ps->size = 0;
    ps->capacity = 0;
}
void SeqListDestroy(SeqList* ps)
{
    assert(ps);

    free(ps->a);
    ps->a = NULL;

    ps->capacity = 0;
    ps->size = 0;

}
void SeqListPushBack(SeqList* ps, SLDatatype x)
{
    assert(ps);
    

    if (ps->capacity == ps->size)
    {
        int newcapacity = ps->capacity == 0 ? 10 : 2 * ps->capacity;
        
        SLDatatype* tem = (SLDatatype*)realloc(ps->a, 2 * newcapacity * sizeof(SLDatatype));
        if (tem == NULL)
        {
            printf("%s", strerror(errno));
            exit(-1);
        }
        else
        {
            ps->a = tem;
        }
        ps->capacity = newcapacity;
      
    }

    ps->a[ps->size] = x;
    ps->size++;


}
void SeqListPushFront(SeqList* ps, SLDatatype x)
{
    assert(ps);
    
    if (ps->a == NULL)
    {
        SeqListPushBack(ps, x);
    }
    else
    {
        for (int i = ps->size-1; i >= 0; i--)
        {
            ps->a[i + 1] = ps->a[i];
        }

        ps->a[0] = x;
        ps->size++;
    }


}
void SeqListPopBack(SeqList* ps)
{
    assert(ps);
    assert(ps->size >= 0);

    ps->size--;
}
void SeqListPopFront(SeqList* ps)
{
    assert(ps);
    assert(ps->size > 0);

    for (int i = 0; i < ps->size - 1; i++)
    {
        ps->a[i] = ps->a[i + 1];
    }

    ps->size--;

}
int SeqListFind(SeqList* ps, SLDatatype x)
{
    assert(ps);
    assert(ps->size > 0);
    int i = 0;
    for ( i = 0; i < ps->size; i++)
    {
        if (ps->a[i] == x)
        {
            break;
        }

    }
    if (i == ps->size)
    {
        printf("没找到");
        return 0;
    }
    else
    {
        return x;
    }

}
void SeqListInsert(SeqList* ps, size_t pos, SLDatatype x)
{
    assert(ps);
    assert(ps->size > 0);

    for (int i = ps->size - 1; i >= pos + 1; i--)
    {
        ps->a[i + 1] = ps->a[i];
    }

    ps->a[pos] = x;
    ps->size++;

}
void SeqListErase(SeqList* ps, size_t pos)
{
    assert(ps);
    assert(ps->size > 0);
    
    for (int i = pos + 1; i <= ps->size - 1; i++)
    {
        ps->a[i - 1] = ps->a[i];
    }

    ps->size--;
}
void SeqListPrint(SeqList* ps)
{
    assert(ps);
    assert(ps->size > 0);

    for (int i = 0; i < ps->size; i++)
    {
        printf("%d ", ps->a[i]);
    }

}
int main()
{
    SeqList sl;
    SeqListInit(&sl);
    //尾插 
    SeqListPushBack(&sl, 1);
    SeqListPushBack(&sl, 2);
    SeqListPushBack(&sl, 3);
    SeqListPushBack(&sl, 4);
    SeqListPushBack(&sl, 5);
    //头插
    SeqListPushFront(&sl, 10);
    SeqListPushFront(&sl, 9);
    SeqListPushFront(&sl, 8);
    SeqListPushFront(&sl, 7);
    SeqListPushFront(&sl, 6);

   // SeqListPrint(&sl);



    //尾删
    SeqListPopBack(&sl);
    SeqListPopBack(&sl);
    SeqListPopBack(&sl);
    SeqListPopBack(&sl);
    SeqListPopBack(&sl);
  
    //SeqListPrint(&sl);
    
    //头删
    SeqListPopFront(&sl);
    SeqListPopFront(&sl);
    SeqListPopFront(&sl);

   //SeqListPrint(&sl);

    //查找一个数并返回
    //int ret=SeqListFind(&sl, 9);
    //printf("%d", ret);
   //在某个制定位置后面插入一个数
   // SeqListInsert(&sl, 2, 3);
   // SeqListPrint(&sl);
   //删除pos位置的值
    SeqListErase(&sl, 0);
    SeqListPrint(&sl);



   //SeqListDestroy(&sl);

    return 0;
}
