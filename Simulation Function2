int my_strcmp(char* dest, char* src)
{
	while (*dest == *src && *dest != 0 && *src != 0)//当两个元素不相等或者有一个元素是0时就跳出循环
	{
		dest++;
		src++;
	}
	if (*dest > *src)
	{
		return 1;
	}
	else if (*dest < *src)
	{
		return -1;
	}
	else
		return 0;
}
int main()
{
	char arr1[] = "abcdef";
	char arr2[] = "abcdeff";
	int ret=my_strcmp(arr1, arr2);
	printf("%d\n", ret);
	return 0;
}




void* my_memcpy(void* dest,void* src,int num)
{
	void* ret = dest;
	if (src > dest)//如果源地址小于目的地地址，则可以从前往后拷贝（如果发生了内存重叠，想完成该功能就要进行判断拷贝的顺序）
	{
		while (num--)
		{
			*(char*)dest = *(char*)src;
			++(char*)dest;
			++(char*)src;
		}
	}
	if (src < dest)//如果源地址大于目的地地址，则可以从后往前拷贝(结构体变量的拷贝不会发生内存重叠的现象不进行判断也行）
	{
		while(num--)//当num=20时，先使用20用来判断表达式是否为0或非0，然后再减减等于19，后面的循环中用的num就等于19
		*((char*)dest+num) = *((char*)src+num);
	    --(char*)dest;
		--(char*)src;
	}
	return ret;
}
struct s
{
	char name[20];//一定要设置内存大小
	int age;
};
int main()
{
	struct s s[] = { {"zhangsan", 20} ,{"lisi",21} };
	struct s s1[3] = { 0 };
	int arr[] = { 1,2,3,4,5,6,7,8,9 };
    my_memcpy(s+1,s , sizeof(s[0]));//要拷贝多少个元素，就应该设置大小为元素个数乘以数据类型的大小
	memmove(arr, arr + 1, 16);//直接用memmov或者memcopy也能解决内存重叠的问题
	return 0;
}
